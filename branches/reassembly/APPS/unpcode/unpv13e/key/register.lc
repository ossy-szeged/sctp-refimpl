
/* include sadb_register */
void##  1 ##src/key/register.c##
sadb_register(int type)##  2 ##src/key/register.c##
{##  3 ##src/key/register.c##
    int     s;##  4 ##src/key/register.c##
    char    buf[4096];          /* XXX */##  5 ##src/key/register.c##
    struct sadb_msg msg;##  6 ##src/key/register.c##
    int     goteof;##  7 ##src/key/register.c##
    int     mypid;##  8 ##src/key/register.c##

    s = Socket(PF_KEY, SOCK_RAW, PF_KEY_V2);##  9 ##src/key/register.c##

    mypid = getpid();## 10 ##src/key/register.c##

    /* Build and write SADB_REGISTER request */## 11 ##src/key/register.c##
    bzero(&msg, sizeof(msg));## 12 ##src/key/register.c##
    msg.sadb_msg_version = PF_KEY_V2;## 13 ##src/key/register.c##
    msg.sadb_msg_type = SADB_REGISTER;## 14 ##src/key/register.c##
    msg.sadb_msg_satype = type;## 15 ##src/key/register.c##
    msg.sadb_msg_len = sizeof(msg) / 8;## 16 ##src/key/register.c##
    msg.sadb_msg_pid = mypid;## 17 ##src/key/register.c##
    printf("Sending  message:\n");## 18 ##src/key/register.c##
    print_sadb_msg(&msg, sizeof(msg));## 19 ##src/key/register.c##
    Write(s, &msg, sizeof(msg));## 20 ##src/key/register.c##

    printf("\nReply returned:\n");## 21 ##src/key/register.c##
    /* Read and print SADB_REGISTER reply, discarding any others */## 22 ##src/key/register.c##
    while (1) {## 23 ##src/key/register.c##
        int     msglen;## 24 ##src/key/register.c##
        struct sadb_msg *msgp;## 25 ##src/key/register.c##

        msglen = Read(s, &buf, sizeof(buf));## 26 ##src/key/register.c##
        msgp = (struct sadb_msg *) &buf;## 27 ##src/key/register.c##
        if (msgp->sadb_msg_pid == mypid &&## 28 ##src/key/register.c##
            msgp->sadb_msg_type == SADB_REGISTER) {## 29 ##src/key/register.c##
            print_sadb_msg(msgp, msglen);## 30 ##src/key/register.c##
            break;## 31 ##src/key/register.c##
        }## 32 ##src/key/register.c##
    }## 33 ##src/key/register.c##
    close(s);## 34 ##src/key/register.c##
}## 35 ##src/key/register.c##
/* end sadb_register */

int## 36 ##src/key/register.c##
main(int argc, char **argv)## 37 ##src/key/register.c##
{## 38 ##src/key/register.c##
    int     satype = SADB_SATYPE_UNSPEC;## 39 ##src/key/register.c##
    int     c;## 40 ##src/key/register.c##

    opterr = 0;                 /* don't want getopt() writing to stderr */## 41 ##src/key/register.c##
    while ((c = getopt(argc, argv, "t:")) != -1) {## 42 ##src/key/register.c##
        switch (c) {## 43 ##src/key/register.c##
        case 't':## 44 ##src/key/register.c##
            if ((satype = getsatypebyname(optarg)) == -1)## 45 ##src/key/register.c##
                err_quit("invalid -t option %s", optarg);## 46 ##src/key/register.c##
            break;## 47 ##src/key/register.c##

        default:## 48 ##src/key/register.c##
            err_quit("unrecognized option: %c", c);## 49 ##src/key/register.c##
        }## 50 ##src/key/register.c##
    }## 51 ##src/key/register.c##

    if (satype == SADB_SATYPE_UNSPEC) {## 52 ##src/key/register.c##
        usage("must specify SA type");## 53 ##src/key/register.c##
    }## 54 ##src/key/register.c##

    sadb_register(satype);## 55 ##src/key/register.c##
}## 56 ##src/key/register.c##
