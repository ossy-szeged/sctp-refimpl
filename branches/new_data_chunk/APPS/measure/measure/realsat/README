*****************************************************************
Server side
*****************************************************************
First, pick the side where the server will
run and bring up two windows.

In one window type:

cmp_server -p 2222

In the other window type

cmp_server -t -p 2222

*****************************************************************

If you would like to run ethereal, then move to another virtual
desktop (at the bottom is the panel that you can click on
to move). Create a window and in the window type:

xhost +localhost
su
(give the su password)
ethereal &

you can now use the mouse to start collection on xl0.


*****************************************************************
Client side
*****************************************************************
To start the client create a window and copy the
std.measure file to the "code name" you want to use.
For example if I have ack-split at 4 and window stuff at 1 I
might want to use

s4w1nd

as the "code name".

Or if I have no tunnel up I might want to use 

base

as the code name.

type

cp std.measure s4w1nd


Now run the client for each error pass.. you will
use a code to indicate what error rate you select:

1 - 10-12
2 - 10-7
3 - 10-6
4 - 10-5


Now set the first error rate and type:

m_cmp_client -e 1 -f s4w1 -h 164.184.x.3 -p 2222 -M <num-of-passes>

The x in the ip address is the rest of the ip address where
the servers are running (on the opposite side where you started
the servers).

The -e 1 stands for the error rate you are using.
The -f s4w1 indicates the code name you created when you
copied the file above.

The -M is associated with the number of passes. If you fail
to include this option it will run forever until you type
control-c.. at which time it will indicate how many passes
have run, and that it will stop when it finishes the current
pass it is working on. So if you want to run 20 passes supply
-M 20.

Wait until the pass complets and then change the error settings
and re-run the command with all the parameters the same but
with a -e X where X cooresponds to your error rate.

After collecting the data for all error rates, you may want to
change the tunnel parameters and the create a new code name (using
cp like above) and then re-run the test again.

You can also change the routing to NOT use the tunnel so that
you can generate a base-line performance that you can compare
to what the tunnel performance is.

***************************************************************
Plotting the data with the data_sorter
***************************************************************
First create a directory for your code-name.
i.e.:

mkdir s4w1nd

Then change into that directory

cd s4w1nd

Now copy the data you collected into this directory

cp ../s4w1nd.data .

Run the data sorter (output without args follows)
----------------
bash-bsd1:data_sorter 
No input file specified :-<
Use data_sorter -i input-file -o output-file [-p -s 'symbol' b -B dir -e -c] 
 -p - issue postscript output (default is mif)
 -e - use encapsulated postscript
 -s 'symbol' - include symbole sctp-'sym' in graph
 -b - include base.tcp.x and base.sctp.x lines
 -B - directory of baseline tcp/sctp plots
 -c - Color on for postscript
bash-bsd1: 
------------------------------

To plot just the two lines from a set of passes run the data sorter
as follows:

data_sorter -p -i s4w1nd.data -c -o s4w1 -s enh

------------------------------------------------

If you would like to compare two different sets of graphs
then run it as follows

data_sorter -p -i s4w1nd.data -c -o s4w1 -B ../other_dir -b other-code-name

for example if you had done

mkdir base
cd base
cp ../base.data .
data_sorter -p -i base.data -c -o base -s base


You can compare the s4w1nd data to the base data by typing

data_sorter -p -i s4w1nd.data -c -o s4w1 -B ../base -b base  

-------------------------------------------------


