So, you need to debug SCTP (otherwise you would not
be looking in this directory :-D)

First, before discussing the tools here I will give
you some general pointers on whats present in the kernel
and what you have to do. Note KTR is a FreeBSD feature
(ltrace for panda) and is not available for MAC yet.
We might be able to get it in with Leopard maybe but
not yet.

In BSD we have KTR, in Panda we have ltrace. These tools
set so we can tracing things happening in the kernel.
For Panda they are always enabled. For BSD you must
add the lines:

options KTR

Now in BSD this only gives you 1024 entries by default,
which for any type of tracing and logging is to small, so
you will need to add:

options KTR_ENTRIES=65536

Note the number must be a power of 2, see man ktr(9) for
more info.

For MAC/OS and for where you don't want to include
KTR as an option, there is another choice as well.
You can add the following to opt_sctp.h in your
build directory:

#define SCTP_LOCAL_TRACE_BUF 1

When using the local trace buffer the constant
SCTP_MAX_LOGGING_SIZE is tweaked to increase the
trace buffer size. It is in sctp_uio.h
and defaults to 30,000 entries.

If you use this option then you don't use
the ktr functions to pull the buffer, instead use 
dump_apple_log
to pull out the buffer and then channel that output
into 
prtcwdlog -l - 

as discussed below. The trace points are all the same
so read on to find out about them.

Once you have this built in the kernel, you are set
to do most of the logging. SCTP has these in the kernel
by default. But if you want to do debug tracing you will
also need to add:
options SCTP_LTRACE_CHUNKS
options SCTP_LTRACE_ERRORS
options SCTP_PACKET_LOGGING 

There are also 3 types of logging not on by default:
options SCTP_MBCNT_LOGGING
options SCTP_LOCK_LOGGING
options SCTP_MBUF_LOGGING

They are more debug type logging so in BSD we left
them off. Note for panda these are on so you don't
need to do anything.

Once you have your kernel setup properly you will need
to turn on the trace point in panda, in BSD we turn
on the ktr mask. For panda please refer to the panda
side guide for the trace point(s). For BSD you 
turn on KTR_SUBSYS, which is 0x20. To do this you
have two options. 

a) Make it the default KTR mask that is on (KTR_GEN
   is the default if you do not change a kernel config)
or

b) Use a sysctl to turn it on. 

For <a> you must add

options KTR_MASK=KTR_SUBSYS

to your build. For <b> you must do a sysctl -w as root
like this:

sysctl -w "debug.ktr.mask=0x20"

So now you have the trace points enabled. You must also
turn on the actual logging/debug points you are interested
in with a sysctl as well. SCTP has a sysctl that is call
the sctp_logging level (for Panda consult your panda side
documentation on how to change a sysctl variable). For
BSD we set this by doing:

sysctl -w "net.inet.sctp.sctp_logging=mask"

Where mask is the logging bit mask you want to turn on. The
levels are found at the bottom of sctp.h and I repeate them
here:

SCTP_BLK_LOGGING_ENABLE				0x00000001
SCTP_CWND_MONITOR_ENABLE			0x00000002
SCTP_CWND_LOGGING_ENABLE			0x00000004
SCTP_EARLYFR_LOGGING_ENABLE			0x00000010
SCTP_FLIGHT_LOGGING_ENABLE			0x00000020
SCTP_FR_LOGGING_ENABLE				0x00000040
SCTP_LOCK_LOGGING_ENABLE			0x00000080
SCTP_MAP_LOGGING_ENABLE				0x00000100
SCTP_MBCNT_LOGGING_ENABLE			0x00000200
SCTP_MBUF_LOGGING_ENABLE			0x00000400
SCTP_NAGLE_LOGGING_ENABLE			0x00000800
SCTP_RECV_RWND_LOGGING_ENABLE			0x00001000
SCTP_RTTVAR_LOGGING_ENABLE			0x00002000
SCTP_SACK_LOGGING_ENABLE			0x00004000
SCTP_SACK_RWND_LOGGING_ENABLE			0x00008000
SCTP_SB_LOGGING_ENABLE				0x00010000
SCTP_STR_LOGGING_ENABLE				0x00020000
SCTP_WAKE_LOGGING_ENABLE			0x00040000
SCTP_LOG_MAXBURST_ENABLE			0x00080000
SCTP_LOG_RWND_ENABLE    			0x00100000
SCTP_LOG_SACK_ARRIVALS_ENABLE                   0x00200000
SCTP_LTRACE_CHUNK_ENABLE                        0x00400000
SCTP_LTRACE_ERROR_ENABLE                        0x00800000
SCTP_LAST_PACKET_TRACING                        0x01000000

Select the bits you want on and create a mask by or'ing them
together. So for example if I wanted the two ltrace ones
(errors and chunks) and the packet tracing I would do:

sysctl -w "net.inet.sctp.sctp_logging=0x01c00000"

Now run your SCTP tests, or whatever you are interested
in. Once you have gathered your data you can use the
following tools to help you debug it. And that even
includes if you crash and get a kernel core.

So what tools do you have available here and how
do we use them. Here is a list.

gdbdump_to_bin.c
to_pcap.c
parse_log.c
prtcwndlog.c
dump_apple_log.c (dumps out ktrdump for local trace buf)

Note for panda pprtcwndlog is built into the ltracing
system, all you need to do is display the ltrace point and
it will give you the same output as BSD does when you get
and print the points.

So on BSD how do we display the two LTRACE points (or any
of the logging but the packet tracing for that matter)?

You first do a ktrdump as follows:

ktrdump -q -t -o some_file_name

This saves off the raw data (its ascii so you can
look at if you want, its not to pretty though). Note
you can dump this with a ktr command from ddb too.
You must capture it into a file .. and I think there
is a kgdb macro to pull it as well (if not I will put
one in the gdb macro's file in KERN).

Once you get your raw file "some_file_name" created you
can display it by typing 

prtcwndlog -l some_file_name

Or if your system is up and function you could instead
do one command line:

ktrdump -q -t | prtcwndlog -l -

But of course this is a dynamic log, so if you do the above
you won't be able to do the command again and get the
same results. Note you must also be root to do a ktrdump.
prtcwndlog also as some options for graphing different
types of logs and such.. but I won't document that here
I need to write some other info on this somewhere else
(late :-d).

So what about the packet tracing stuff? 

Packet tracing allows you to see the last packets your
SCTP stack recieved (even ones with bad csums). Now
you only get SCTP_PACKET_LOG_SIZE bytes of data (default
65,535). So this means you will see the last 40 or so
packets (depending on size.. maybe more). You must 
run the function:

parse_log file-to-write

Where file-to-write is some file you want to create. It
will be a binary dump of the data with a special format
int <end-of-log>
followed by up to
SCTP_PACKET_LOG_SIZE bytes of data.

Good but not to useful. This is where the tool to_pcap
comes in. You run this on the "file-to-write" you created:

to_pcap -i file-to-write -o file-to-write.pcap

Note that if your file-to-write came from a
network byte order machine (non-intel) and you
are running to_pcap on an intel machine you need
to add -e to the to_pcap.. e.g:
to_pcap -e -i file-to-write -o file-to-write.pcap
This will resolve byte order issues in the
translation to pcap :-D

This then generates a pcap file that you can use your
favorite tool (wireshark) to look at and debug.
Life is good, you have the last N packets to see what
came in.

But wait, what do you do if you have a kernel crash?
You can't run these commands.. what do you do?

Well here it takes a bit more dedication. As I said
for the ktr stuff, no problem you run the macro to
get the text file on your screen. Cut and paste it
into a file. Then run your prtcwndlog program. But
what about the packet log, is there any hope? Of course
there is.. you just need to be a bit more tricky.

In kgdb do the following:

(k)gdb> x/1 &packet_log_end
 <packet_log_end>:    0x00000138
(k)gdb> x/16383 packet_log_buffer
0xc0e86060 <packet_log_buffer>:         0x0000009c      0x00000000      0x000455f4      0x008c0045
0xc0e86070 <packet_log_buffer+16>:      0x0000ca00      0x00008440      0x0bc211ac      0xb74613ac
0xc0e86080 <packet_log_buffer+32>:      0xae08ae08      0x00000000      0x5e936948      0x6c000001
0xc0e86090 <packet_log_buffer+48>:      0x7d1a4929      0x388e0300      0x0d000d00      0xb7db2f58
0xc0e860a0 <packet_log_buffer+64>:      0x08000c00      0x06000500      0x080006c0      0x53524c50
0xc0e860b0 <packet_log_buffer+80>:      0x04000080      0x040000c0      0x0a000880      0x81c080c1
0xc0e860c0 <packet_log_buffer+96>:      0x00000f82      0x24000280      0xda0d7ca4      0xe468db6b
0xc0e860d0 <packet_log_buffer+112>:     0xe0ad2dda      0xde14e9f2      0x91ae23ad      0x956c6be7
0xc0e860e0 <packet_log_buffer+128>:     0x8dfd5bac      0x4fea9341      0x08000480      0x03000100
0xc0e860f0 <packet_log_buffer+144>:     0x06000380      0x0000c180      0x00000000      0x0000009c
0xc0e86100 <packet_log_buffer+160>:     0x0000009c      0x000459e6      0x008c0045      0x0000cb00
0xc0e86110 <packet_log_buffer+176>:     0x00008440      0x0bc211ac      0xb74613ac      0xae08ae08
0xc0e86120 <packet_log_buffer+192>:     0x00000000      0x0c8b996c      0x6c000001      0xfa565fdd
0xc0e86130 <packet_log_buffer+208>:     0x388e0300      0x0d000d00      0xaff5c4d2      0x08000c00
0xc0e86140 <packet_log_buffer+224>:     0x06000500      0x080006c0      0x53524c50      0x04000080
0xc0e86150 <packet_log_buffer+240>:     0x040000c0      0x0a000880      0x81c080c1      0x00000f82
0xc0e86160 <packet_log_buffer+256>:     0x24000280      0xf3597d91      0xa282b7c5      0x81bade57
0xc0e86170 <packet_log_buffer+272>:     0x26b5fec2      0x204161e5      0xae74bdf0      0x98f9dd1c
0xc0e86180 <packet_log_buffer+288>:     0x27607702      0x08000480      0x03000100      0x06000380
0xc0e86190 <packet_log_buffer+304>:     0x0000c180      0x0000009c      0x00000000      0x00000000
<lots of other stuff cut off, but its not needed here since I only have a single init in the
 buffer for demo :-d>

Now we need to make the packet_log_end look like its in the same buffer (the int
at the beginning). So we edit the file to look like so:

0xc0e8605c <packet_log_end>:            0x00000138
0xc0e86060 <packet_log_buffer>:         0x0000009c      0x00000000      0x000455f4      0x008c0045
0xc0e86070 <packet_log_buffer+16>:      0x0000ca00      0x00008440      0x0bc211ac      0xb74613ac
0xc0e86080 <packet_log_buffer+32>:      0xae08ae08      0x00000000      0x5e936948      0x6c000001
0xc0e86090 <packet_log_buffer+48>:      0x7d1a4929      0x388e0300      0x0d000d00      0xb7db2f58
0xc0e860a0 <packet_log_buffer+64>:      0x08000c00      0x06000500      0x080006c0      0x53524c50
0xc0e860b0 <packet_log_buffer+80>:      0x04000080      0x040000c0      0x0a000880      0x81c080c1
0xc0e860c0 <packet_log_buffer+96>:      0x00000f82      0x24000280      0xda0d7ca4      0xe468db6b
0xc0e860d0 <packet_log_buffer+112>:     0xe0ad2dda      0xde14e9f2      0x91ae23ad      0x956c6be7
0xc0e860e0 <packet_log_buffer+128>:     0x8dfd5bac      0x4fea9341      0x08000480      0x03000100
0xc0e860f0 <packet_log_buffer+144>:     0x06000380      0x0000c180      0x00000000      0x0000009c
0xc0e86100 <packet_log_buffer+160>:     0x0000009c      0x000459e6      0x008c0045      0x0000cb00
0xc0e86110 <packet_log_buffer+176>:     0x00008440      0x0bc211ac      0xb74613ac      0xae08ae08
0xc0e86120 <packet_log_buffer+192>:     0x00000000      0x0c8b996c      0x6c000001      0xfa565fdd
0xc0e86130 <packet_log_buffer+208>:     0x388e0300      0x0d000d00      0xaff5c4d2      0x08000c00
0xc0e86140 <packet_log_buffer+224>:     0x06000500      0x080006c0      0x53524c50      0x04000080
0xc0e86150 <packet_log_buffer+240>:     0x040000c0      0x0a000880      0x81c080c1      0x00000f82
0xc0e86160 <packet_log_buffer+256>:     0x24000280      0xf3597d91      0xa282b7c5      0x81bade57
0xc0e86170 <packet_log_buffer+272>:     0x26b5fec2      0x204161e5      0xae74bdf0      0x98f9dd1c
0xc0e86180 <packet_log_buffer+288>:     0x27607702      0x08000480      0x03000100      0x06000380
0xc0e86190 <packet_log_buffer+304>:     0x0000c180      0x0000009c      0x00000000      0x00000000

Now take the output of these two command and get them all lined up
with no extra text. 

The conversion program looks at the front addresses to make sure that everything
is in order... so we just "fool" it by adding an address 4 minus the one
displayed for the packet log buffer's first address i.e. 0xc0e86060 - 4 = 0xc0e8605c
Now the gdb dump program will happily make the buffer look just like what parse_log
would have returned :-D

Note that if you have a larger (or smaller) SCTP_PACKET_LOG_SIZE you need
to take that number and divide by 4. Put the result of that in, in place
of the 16383 above.

And now do:

gdbdump_to_bin -i input-file -o binary-output-file

This will generate your binary file.

One thing that will make your life easier is to do
(k)gdb .... ARGS.... | tee output_file

Then when you do the command (k)gdb will recognize you
have a tee and not page through the packet buffer.

Then all you have to do is edit output_file to get
rid of all extra text but the hex dump. With that
you can then take the binary and do the same thing to
it that you would have done with to_pcap.

Tada.. life is good once again ;-D

Have fun

R
