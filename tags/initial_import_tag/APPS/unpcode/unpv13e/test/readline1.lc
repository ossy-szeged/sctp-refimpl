/* include readline */
#include    "unp.h"##  1 ##src/test/readline1.c##

/* PAINFULLY SLOW VERSION -- example only */##  2 ##src/test/readline1.c##
ssize_t##  3 ##src/test/readline1.c##
readline(int fd, void *vptr, size_t maxlen)##  4 ##src/test/readline1.c##
{##  5 ##src/test/readline1.c##
    ssize_t n, rc;##  6 ##src/test/readline1.c##
    char    c, *ptr;##  7 ##src/test/readline1.c##

    ptr = vptr;##  8 ##src/test/readline1.c##
    for (n = 1; n < maxlen; n++) {##  9 ##src/test/readline1.c##
      again:## 10 ##src/test/readline1.c##
        if ((rc = read(fd, &c, 1)) == 1) {## 11 ##src/test/readline1.c##
            *ptr++ = c;## 12 ##src/test/readline1.c##
            if (c == '\n')## 13 ##src/test/readline1.c##
                break;          /* newline is stored, like fgets() */## 14 ##src/test/readline1.c##
        } else if (rc == 0) {## 15 ##src/test/readline1.c##
            *ptr = 0;## 16 ##src/test/readline1.c##
            return (n - 1);     /* EOF, n - 1 bytes were read */## 17 ##src/test/readline1.c##
        } else {## 18 ##src/test/readline1.c##
            if (errno == EINTR)## 19 ##src/test/readline1.c##
                goto again;## 20 ##src/test/readline1.c##
            return (-1);        /* error, errno set by read() */## 21 ##src/test/readline1.c##
        }## 22 ##src/test/readline1.c##
    }## 23 ##src/test/readline1.c##

    *ptr = 0;                   /* null terminate like fgets() */## 24 ##src/test/readline1.c##
    return (n);## 25 ##src/test/readline1.c##
}## 26 ##src/test/readline1.c##
/* end readline */

ssize_t## 27 ##src/test/readline1.c##
Readline(int fd, void *ptr, size_t maxlen)## 28 ##src/test/readline1.c##
{## 29 ##src/test/readline1.c##
    ssize_t n;## 30 ##src/test/readline1.c##

    if ((n = readline(fd, ptr, maxlen)) < 0)## 31 ##src/test/readline1.c##
        err_sys("readline error");## 32 ##src/test/readline1.c##
    return (n);## 33 ##src/test/readline1.c##
}## 34 ##src/test/readline1.c##
