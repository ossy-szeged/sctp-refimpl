
/* include sadb_dump */
void##  1 ##src/key/dump.c##
sadb_dump(int type)##  2 ##src/key/dump.c##
{##  3 ##src/key/dump.c##
    int     s;##  4 ##src/key/dump.c##
    char    buf[4096];##  5 ##src/key/dump.c##
    struct sadb_msg msg;##  6 ##src/key/dump.c##
    int     goteof;##  7 ##src/key/dump.c##

    s = Socket(PF_KEY, SOCK_RAW, PF_KEY_V2);##  8 ##src/key/dump.c##

    /* Build and write SADB_DUMP request */##  9 ##src/key/dump.c##
    bzero(&msg, sizeof(msg));## 10 ##src/key/dump.c##
    msg.sadb_msg_version = PF_KEY_V2;## 11 ##src/key/dump.c##
    msg.sadb_msg_type = SADB_DUMP;## 12 ##src/key/dump.c##
    msg.sadb_msg_satype = type;## 13 ##src/key/dump.c##
    msg.sadb_msg_len = sizeof(msg) / 8;## 14 ##src/key/dump.c##
    msg.sadb_msg_pid = getpid();## 15 ##src/key/dump.c##
    printf("Sending dump message:\n");## 16 ##src/key/dump.c##
    print_sadb_msg(&msg, sizeof(msg));## 17 ##src/key/dump.c##
    Write(s, &msg, sizeof(msg));## 18 ##src/key/dump.c##

    printf("\nMessages returned:\n");## 19 ##src/key/dump.c##
    /* Read and print SADB_DUMP replies until done */## 20 ##src/key/dump.c##
    goteof = 0;## 21 ##src/key/dump.c##
    while (goteof == 0) {## 22 ##src/key/dump.c##
        int     msglen;## 23 ##src/key/dump.c##
        struct sadb_msg *msgp;## 24 ##src/key/dump.c##

        msglen = Read(s, &buf, sizeof(buf));## 25 ##src/key/dump.c##
        msgp = (struct sadb_msg *) &buf;## 26 ##src/key/dump.c##
        print_sadb_msg(msgp, msglen);## 27 ##src/key/dump.c##
        if (msgp->sadb_msg_seq == 0)## 28 ##src/key/dump.c##
            goteof = 1;## 29 ##src/key/dump.c##
    }## 30 ##src/key/dump.c##
    close(s);## 31 ##src/key/dump.c##
}## 32 ##src/key/dump.c##

int## 33 ##src/key/dump.c##
main(int argc, char **argv)## 34 ##src/key/dump.c##
{## 35 ##src/key/dump.c##
    int     satype = SADB_SATYPE_UNSPEC;## 36 ##src/key/dump.c##
    int     c;## 37 ##src/key/dump.c##

    opterr = 0;                 /* don't want getopt() writing to stderr */## 38 ##src/key/dump.c##
    while ((c = getopt(argc, argv, "t:")) != -1) {## 39 ##src/key/dump.c##
        switch (c) {## 40 ##src/key/dump.c##
        case 't':## 41 ##src/key/dump.c##
            if ((satype = getsatypebyname(optarg)) == -1)## 42 ##src/key/dump.c##
                err_quit("invalid -t option %s", optarg);## 43 ##src/key/dump.c##
            break;## 44 ##src/key/dump.c##

        default:## 45 ##src/key/dump.c##
            err_quit("unrecognized option: %c", c);## 46 ##src/key/dump.c##
        }## 47 ##src/key/dump.c##
    }## 48 ##src/key/dump.c##

    sadb_dump(satype);## 49 ##src/key/dump.c##
}## 50 ##src/key/dump.c##
/* end sadb_dump */
